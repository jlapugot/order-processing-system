name: CD - Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        type: string

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY_ORDER: order-service
  ECR_REPOSITORY_INVENTORY: inventory-service
  ECS_CLUSTER: prod-cluster
  ECS_SERVICE_ORDER: prod-order-service
  ECS_SERVICE_INVENTORY: prod-inventory-service

jobs:
  approve:
    name: Approve Production Deployment
    runs-on: ubuntu-latest
    environment: production-approval

    steps:
      - name: Manual approval required
        run: echo "Deployment approved for production"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: approve
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version || github.event.release.tag_name }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Order Service
        run: |
          cd services/order-service
          mvn clean package -DskipTests

      - name: Build Inventory Service
        run: |
          cd services/inventory-service
          mvn clean package -DskipTests

      - name: Build, tag, and push Order Service image
        id: build-order-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.event.inputs.version || github.event.release.tag_name }}
        run: |
          cd services/order-service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_ORDER:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_ORDER:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_ORDER:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_ORDER:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_ORDER:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_ORDER:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push Inventory Service image
        id: build-inventory-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.event.inputs.version || github.event.release.tag_name }}
        run: |
          cd services/inventory-service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_INVENTORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_INVENTORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_INVENTORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_INVENTORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_INVENTORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_INVENTORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create deployment backup
        run: |
          # Backup current task definitions
          aws ecs describe-task-definition \
            --task-definition prod-order-service \
            --query taskDefinition > order-task-backup.json

          aws ecs describe-task-definition \
            --task-definition prod-inventory-service \
            --query taskDefinition > inventory-task-backup.json

          # Store backups in S3
          aws s3 cp order-task-backup.json s3://prod-order-processing-backups/deployments/$(date +%Y%m%d-%H%M%S)/
          aws s3 cp inventory-task-backup.json s3://prod-order-processing-backups/deployments/$(date +%Y%m%d-%H%M%S)/

      - name: Download Order Service task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition prod-order-service \
            --query taskDefinition > order-task-definition.json

      - name: Fill in the new image ID for Order Service
        id: order-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: order-task-definition.json
          container-name: order-service
          image: ${{ steps.build-order-image.outputs.image }}

      - name: Deploy Order Service to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.order-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_ORDER }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Download Inventory Service task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition prod-inventory-service \
            --query taskDefinition > inventory-task-definition.json

      - name: Fill in the new image ID for Inventory Service
        id: inventory-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: inventory-task-definition.json
          container-name: inventory-service
          image: ${{ steps.build-inventory-image.outputs.image }}

      - name: Deploy Inventory Service to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.inventory-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_INVENTORY }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Verify deployment
        run: |
          echo "✅ Deployment to production environment completed"
          echo "Order Service Image: ${{ steps.build-order-image.outputs.image }}"
          echo "Inventory Service Image: ${{ steps.build-inventory-image.outputs.image }}"

      - name: Run smoke tests
        run: |
          # Wait for services to be fully ready
          sleep 60

          # Get ALB DNS name
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names prod-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          echo "Testing Order Service health endpoint..."
          curl -f http://$ALB_DNS/api/orders/actuator/health || exit 1

          echo "Testing Inventory Service health endpoint..."
          curl -f http://$ALB_DNS/api/inventory/actuator/health || exit 1

          echo "✅ Smoke tests passed"

      - name: Run integration tests
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names prod-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          # Test order creation flow
          echo "Testing order creation..."
          ORDER_RESPONSE=$(curl -s -X POST http://$ALB_DNS/api/orders \
            -H "Content-Type: application/json" \
            -d '{"customerId":1,"items":[{"productId":1,"quantity":1,"price":99.99}]}')

          echo "Order response: $ORDER_RESPONSE"

          # Verify response contains order ID
          if echo "$ORDER_RESPONSE" | grep -q "id"; then
            echo "✅ Order creation test passed"
          else
            echo "❌ Order creation test failed"
            exit 1
          fi

  notify:
    name: Notify deployment status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Production deployment successful"
            echo "Version: ${{ github.event.inputs.version || github.event.release.tag_name }}"
          else
            echo "❌ Production deployment failed"
            exit 1
          fi

  rollback:
    name: Rollback on failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback deployment
        run: |
          echo "⚠️  Deployment failed, initiating rollback..."

          # Get latest backup from S3
          LATEST_BACKUP=$(aws s3 ls s3://prod-order-processing-backups/deployments/ | sort | tail -n 1 | awk '{print $2}')

          echo "Rolling back to backup: $LATEST_BACKUP"

          # Download backup task definitions
          aws s3 cp s3://prod-order-processing-backups/deployments/$LATEST_BACKUP/order-task-backup.json .
          aws s3 cp s3://prod-order-processing-backups/deployments/$LATEST_BACKUP/inventory-task-backup.json .

          # Register backup task definitions
          aws ecs register-task-definition --cli-input-json file://order-task-backup.json
          aws ecs register-task-definition --cli-input-json file://inventory-task-backup.json

          # Update services to use backup task definitions
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE_ORDER }} \
            --task-definition prod-order-service \
            --force-new-deployment

          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE_INVENTORY }} \
            --task-definition prod-inventory-service \
            --force-new-deployment

          echo "✅ Rollback completed"
