name: CD - Deploy to Development

on:
  # Automatic deployment disabled to avoid AWS costs for portfolio project
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY_ORDER: order-service
  ECR_REPOSITORY_INVENTORY: inventory-service
  ECS_CLUSTER: dev-cluster
  ECS_SERVICE_ORDER: dev-order-service
  ECS_SERVICE_INVENTORY: dev-inventory-service

jobs:
  deploy:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Order Service
        run: |
          cd services/order-service
          mvn clean package -DskipTests

      - name: Build Inventory Service
        run: |
          cd services/inventory-service
          mvn clean package -DskipTests

      - name: Build, tag, and push Order Service image
        id: build-order-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd services/order-service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_ORDER:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_ORDER:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_ORDER:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_ORDER:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_ORDER:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_ORDER:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push Inventory Service image
        id: build-inventory-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd services/inventory-service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_INVENTORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_INVENTORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_INVENTORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_INVENTORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_INVENTORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_INVENTORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download Order Service task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition dev-order-service \
            --query taskDefinition > order-task-definition.json

      - name: Fill in the new image ID for Order Service
        id: order-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: order-task-definition.json
          container-name: order-service
          image: ${{ steps.build-order-image.outputs.image }}

      - name: Deploy Order Service to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.order-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_ORDER }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Download Inventory Service task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition dev-inventory-service \
            --query taskDefinition > inventory-task-definition.json

      - name: Fill in the new image ID for Inventory Service
        id: inventory-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: inventory-task-definition.json
          container-name: inventory-service
          image: ${{ steps.build-inventory-image.outputs.image }}

      - name: Deploy Inventory Service to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.inventory-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_INVENTORY }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Verify deployment
        run: |
          echo "✅ Deployment to development environment completed"
          echo "Order Service Image: ${{ steps.build-order-image.outputs.image }}"
          echo "Inventory Service Image: ${{ steps.build-inventory-image.outputs.image }}"

      - name: Run smoke tests
        run: |
          # Wait for services to be fully ready
          sleep 30

          # Get ALB DNS name
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names dev-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          echo "Testing Order Service health endpoint..."
          curl -f http://$ALB_DNS/api/orders/actuator/health || exit 1

          echo "Testing Inventory Service health endpoint..."
          curl -f http://$ALB_DNS/api/inventory/actuator/health || exit 1

          echo "✅ Smoke tests passed"

  notify:
    name: Notify deployment status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Development deployment successful"
          else
            echo "❌ Development deployment failed"
            exit 1
          fi
